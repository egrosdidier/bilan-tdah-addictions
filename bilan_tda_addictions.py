# Bilan TDAH + Addictions - Streamlit app (v5 - synth√®se √©tendue et export complet)

import streamlit as st
import random
import string
from fpdf import FPDF
import json
import pyzipper
from cryptography.fernet import Fernet

# -------------------------
# S√©curit√© et RGPD
# -------------------------
if 'bilan_data' not in st.session_state:
    st.session_state['bilan_data'] = {}

st.markdown("""
‚ö†Ô∏è **Confidentialit√©** :
- Aucune donn√©e personnelle n‚Äôest stock√©e.
- Les r√©ponses sont temporaires (session navigateur).
- Vous pouvez enregistrer localement vos r√©sultats sous forme chiffr√©e et prot√©g√©e.
""")

# -------------------------
# Utility functions
# -------------------------
def generate_pseudo():
    return ''.join(random.choices(string.ascii_letters + string.digits, k=8))

def save_encrypted_zip(data_dict, password):
    key = Fernet.generate_key()
    cipher = Fernet(key)
    data_json = json.dumps(data_dict).encode()
    encrypted_data = cipher.encrypt(data_json)
    with open("bilan_encrypted.json", "wb") as f:
        f.write(encrypted_data)
    with pyzipper.AESZipFile("bilan_secure.zip", 'w', compression=pyzipper.ZIP_DEFLATED,
                              encryption=pyzipper.WZ_AES) as zf:
        zf.setpassword(password.encode())
        zf.write("bilan_encrypted.json")
    return "bilan_secure.zip"

# -------------------------
# Identifiant
# -------------------------
st.title("üß† Bilan TDAH et Addictions (anonyme)")
pseudo = st.text_input("Entrez un pseudonyme ou laissez vide pour en g√©n√©rer un :")
if not pseudo:
    pseudo = generate_pseudo()
st.success(f"Votre identifiant est : {pseudo}")
st.session_state['bilan_data']['pseudo'] = pseudo

# -------------------------
# Synth√®se clinique automatique
# -------------------------
st.header("üìä Synth√®se clinique automatique")
scores = st.session_state.get("bilan_data", {})

if 'wurs_score' in scores:
    score = scores['wurs_score']
    couleur = "üü¢" if score < 30 else "üü†" if score < 46 else "üî¥"
    st.subheader("üß† TDAH - WURS-25")
    st.write(f"{couleur} Score : {score}")
    if score >= 46:
        st.markdown("‚û°Ô∏è √âvaluation sp√©cialis√©e recommand√©e (TDAH pr√©sum√©)")

if 'asrs_score' in scores:
    score = scores['asrs_score']
    couleur = "üü¢" if score < 4 else "üî¥"
    st.subheader("üß† TDAH - ASRS-6")
    st.write(f"{couleur} Items positifs : {score}")
    if score >= 4:
        st.markdown("‚û°Ô∏è Rep√©rage positif : consultation sp√©cialis√©e recommand√©e")

if 'dast_score' in scores:
    score = scores['dast_score']
    couleur = "üü¢" if score == 0 else "üü†" if score <= 2 else "üî¥"
    st.subheader("üíä Usage de substances - DAST")
    st.write(f"{couleur} Score : {score}")
    if score >= 3:
        st.markdown("‚û°Ô∏è Orientation vers CSAPA recommand√©e")

if 'hads_a_score' in scores and 'hads_d_score' in scores:
    a, d = scores['hads_a_score'], scores['hads_d_score']
    ca, cd = ("üü¢" if a < 8 else "üî¥"), ("üü¢" if d < 8 else "üî¥")
    st.subheader("üòü Anxi√©t√© et D√©pression - HADS")
    st.write(f"Anxi√©t√© : {ca} Score {a}")
    st.write(f"D√©pression : {cd} Score {d}")
    if a >= 8 or d >= 8:
        st.markdown("‚û°Ô∏è Suivi par un professionnel recommand√© (CMP / MG / psy)")

if 'icje_score' in scores:
    score = scores['icje_score']
    couleur = "üü¢" if score < 3 else "üî¥"
    st.subheader("üé∞ Jeux d'argent - ICJE")
    st.write(f"{couleur} Score : {score}")
    if score >= 3:
        st.markdown("‚û°Ô∏è Rep√©rage positif : orientation vers consultation sp√©cialis√©e en addiction comportementale")

if 'igd_score' in scores:
    score = scores['igd_score']
    couleur = "üü¢" if score < 5 else "üî¥"
    st.subheader("üéÆ Jeux vid√©o - IGD")
    st.write(f"{couleur} Score : {score}")
    if score >= 5:
        st.markdown("‚û°Ô∏è Risque de trouble du jeu vid√©o : √©valuation sp√©cialis√©e recommand√©e")

if 'mini_positive' in scores:
    pos = scores['mini_positive']
    st.subheader("üß† Troubles psychiatriques suspect√©s - MINI-S")
    if pos:
        st.write("üî¥ Troubles d√©tect√©s : ", ', '.join(pos))
        st.markdown("‚û°Ô∏è √âvaluation psychiatrique prioritaire recommand√©e")
    else:
        st.write("üü¢ Aucun trouble suspect√© dans le module MINI-S")

# -------------------------
# Liens et ressources
# -------------------------
st.markdown("""
---
üìö **Ressources utiles** :
- [Guide HAS - TDAH adulte](https://www.has-sante.fr/jcms/c_2847166/fr/tdah-de-l-adulte)
- [Addictions - ANSM](https://www.ansm.sante.fr)
- [Psycom - Rep√©rage sant√© mentale](https://www.psycom.org)
""")

# -------------------------
# Sauvegarde locale chiffr√©e
# -------------------------
st.header("üîê Export chiffr√© et s√©curis√© (ZIP)")
password = st.text_input("Choisissez un mot de passe pour s√©curiser vos r√©sultats :", type="password")
if st.button("G√©n√©rer un ZIP s√©curis√©"):
    if not password:
        st.warning("Mot de passe requis.")
    else:
        zip_path = save_encrypted_zip(st.session_state['bilan_data'], password)
        with open(zip_path, "rb") as file:
            st.download_button(label="üì• T√©l√©charger le ZIP s√©curis√©", data=file, file_name="bilan_secure.zip")
